CREATE OR REPLACE FUNCTION CALCULATE_TOTAL_PRICE(
    P_BOOKING_ID IN NUMBER
) RETURN NUMBER IS
    V_ROOM_PRICE     NUMBER;
    V_SERVICES_PRICE NUMBER;
    V_TOTAL_PRICE    NUMBER;
BEGIN
    SELECT
        TOTAL_PRICE INTO V_ROOM_PRICE
    FROM
        BOOKINGS
    WHERE
        BOOKING_ID = P_BOOKING_ID;

    SELECT
        SUM(SERVICES.PRICE * BOOKING_SERVICES.QUANTITY) 
        INTO V_SERVICES_PRICE
    FROM
        BOOKING_SERVICES
        INNER JOIN SERVICES
        ON Booking_Services.service_id = Services.service_id
    WHERE
        BOOKING_SERVICES.BOOKING_ID = P_BOOKING_ID ;
    V_TOTAL_PRICE := V_ROOM_PRICE + V_SERVICES_PRICE;
    RETURN V_TOTAL_PRICE;
END;

CREATE OR REPLACE FUNCTION CREATE_QUESTS(
    P_GUEST_NAME IN VARCHAR,
    P_PHONE_NUMBER IN VARCHAR,
    P_EMAIL IN VARCHAR
) RETURN NUMBER IS
    V_GUEST_ID NUMBER;
BEGIN
    INSERT INTO GUESTS(
        GUEST_NAME,
        PHONE_NUMBER,
        EMAIL
    ) VALUES(
        P_GUEST_NAME,
        P_PHONE_NUMBER,
        P_EMAIL
    ) RETURNING ID INTO V_GUEST_ID;
    RETURN V_GUEST_ID;
END;

SET SERVEROUTPUT ON;

DECLARE
    V_NEW_GUEST_ID NUMBER;
BEGIN
    V_NEW_GUEST_ID := CREATE_QUESTS( P_GUEST_NAME => 'Akos Lab', 
                                     P_PHONE_NUMBER => '1234567890', 
                                     P_EMAIL => 'akos.test@example.com' );
    DBMS_OUTPUT.PUT_LINE('The new guest ID is: '
                         || V_NEW_GUEST_ID);
END;
--Test
SET SERVEROUTPUT ON;

DECLARE
    v_booking_total NUMBER;
BEGIN
    v_booking_total := calculate_total_price(6500);
    DBMS_OUTPUT.PUT_LINE('The total price for the booking is: ' || v_booking_total);
END;