CREATE SEQUENCE stat_id_seq START WITH 200;

CREATE TABLE WEEKLY_STAT_LOG(
    ID NUMBER PRIMARY KEY,
    NUMBER_BOOKINGS NUMBER NOT NULL,
    REVENUE_BOOKING NUMBER NOT NULL,
    NUMBER_SERVICES NUMBER NOT NULL,
    REVENUE_SERVICE NUMBER NOT NULL,
    START_DATE TIMESTAMP(6),
    END_DATE TIMESTAMP(6)
);

CREATE OR REPLACE TRIGGER stat_SEQ_TRG BEFORE
    INSERT ON WEEKLY_STAT_LOG FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := stat_id_seq.NEXTVAL;
    END IF;
END;

CREATE OR REPLACE PROCEDURE CALCULATE_WEEKLY_STAT IS
    V_START_DATE       TIMESTAMP DEFAULT SYSDATE - 7;
    V_END_DATE         TIMESTAMP DEFAULT SYSDATE;
    V_NUMBER_BOOKING   NUMBER;
    V_REVENUE_BOOKING  NUMBER;
    V_NUMBER_SERVICES  NUMBER;
    V_REVENUE_SERVICES NUMBER;
BEGIN
    SELECT
        COUNT(B.BOOKING_ID),
        SUM(B.TOTAL_PRICE),
        COUNT(BS.SERVICE_ID),
        SUM(S.PRICE * BS.QUANTITY) INTO 
        V_NUMBER_BOOKING,
        V_REVENUE_BOOKING,
        V_NUMBER_SERVICES,
        V_REVENUE_SERVICES
    FROM
        BOOKINGS         B
        LEFT JOIN BOOKING_SERVICES BS
        ON B.BOOKING_ID = BS.BOOKING_ID
        LEFT JOIN SERVICES S
        ON BS.SERVICE_ID = S.SERVICE_ID
    WHERE
        B.CHECK_IN_DATE = V_START_DATE
        AND B.CHECK_OUT_DATE = V_END_DATE;
    INSERT INTO WEEKLY_STAT_LOG(
        NUMBER_BOOKINGS,
        REVENUE_BOOKING,
        NUMBER_SERVICES,
        REVENUE_SERVICE
    )VALUES(
        V_NUMBER_BOOKING,
        V_REVENUE_BOOKING,
        V_NUMBER_SERVICES,
        V_REVENUE_SERVICES
    );
END;

BEGIN
    DBMS_SCHEDULER.create_job (
        job_name        => 'CALCULATE_WEEKLY_STAT_JOB',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'BEGIN CALCULATE_WEEKLY_STAT; END;',
        start_date      => SYSTIMESTAMP,
        repeat_interval => 'FREQ=WEEKLY;',
        enabled         => TRUE
    );
END;